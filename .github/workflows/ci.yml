name: CI and Artifacts

on:
    pull_request:
    push:
        # documentation workflow deals with this or is not relevant for this workflow
        paths-ignore:
          - '*.md'
          - 'conduwuit-example.toml'
          - 'book.toml'
          - '.gitlab-ci.yml'
          - '.gitignore'
          - 'renovate.json'
          - 'docs/**'
          - 'debian/**'
          - 'docker/**'
          - 'test_results/**'
        branches:
            - main
            - dev
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

concurrency:
    group: ${{ github.head_ref || github.ref_name }}
    cancel-in-progress: true

env:
    # Required to make some things output color
    TERM: ansi
    # Publishing to my nix binary cache
    ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}
    # Just in case incremental is still being set to true, speeds up CI
    CARGO_INCREMENTAL: 0
    # Custom nix binary cache if fork is being used
    ATTIC_ENDPOINT: ${{ vars.ATTIC_ENDPOINT }}
    ATTIC_PUBLIC_KEY: ${{ vars.ATTIC_PUBLIC_KEY }}
    # Compile for local CPU
    RUSTFLAGS: -C target-cpu=native

permissions:
    packages: write
    contents: read

jobs:
    tests:
        name: Test
        runs-on: self-hosted
        steps:
            - name: Sync repository
              uses: actions/checkout@v4

            - name: Install Nix
              uses: DeterminateSystems/nix-installer-action@main

            - name: Enable Cachix binary cache
              run: |
                  nix profile install nixpkgs#cachix
                  cachix use crane
                  cachix use nix-community

            - name: Configure Magic Nix Cache
              uses: DeterminateSystems/magic-nix-cache-action@main

            - name: Apply Nix binary cache configuration
              run: |
                  sudo tee -a /etc/nix/nix.conf > /dev/null <<EOF
                  extra-substituters = https://attic.kennel.juneis.dog/conduit https://attic.kennel.juneis.dog/conduwuit
                  extra-trusted-public-keys = conduit:Isq8FGyEC6FOXH6nD+BOeAA+bKp6X6UIbupSlGEPuOg= conduwuit:lYPVh7o1hLu1idH4Xt2QHaRa49WRGSAqzcfFd94aOTw=
                  EOF

            - name: Use alternative Nix binary caches if specified
              if: ${{ (env.ATTIC_ENDPOINT != '') && (env.ATTIC_PUBLIC_KEY != '') }}
              run: |
                  sudo tee -a /etc/nix/nix.conf > /dev/null <<EOF
                  extra-substituters = ${{ env.ATTIC_ENDPOINT }}
                  extra-trusted-public-keys = ${{ env.ATTIC_PUBLIC_KEY }}
                  EOF

            - name: Prepare build environment
              run: |
                  echo 'source $HOME/.nix-profile/share/nix-direnv/direnvrc' > "$HOME/.direnvrc"
                  nix profile install --impure --inputs-from . nixpkgs#direnv nixpkgs#nix-direnv
                  direnv allow
                  nix develop --command true

            - name: Run CI tests
              run: |
                  direnv exec . engage > >(tee -a test_output.log)

            - name: Update Job Summary
              if: success() || failure()
              run: |
                  if [ ${{ job.status }} == 'success' ]; then
                      echo '# âœ… completed suwuccessfully' >> $GITHUB_STEP_SUMMARY
                  else
                      echo '```' >> $GITHUB_STEP_SUMMARY
                      tail -n 20 test_output.log | sed 's/\x1b\[[0-9;]*m//g' >> $GITHUB_STEP_SUMMARY
                      echo '```' >> $GITHUB_STEP_SUMMARY
                  fi

    build:
        name: Build
        runs-on: self-hosted
        needs: tests
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        strategy:
            matrix:
                include:
                    - target: x86_64-unknown-linux-musl
                    - target: x86_64-unknown-linux-musl-jemalloc
        steps:
            - name: Sync repository
              uses: actions/checkout@v4

            - name: Install Nix
              uses: DeterminateSystems/nix-installer-action@main

            - name: Install and enable Cachix binary cache
              run: |
                  nix profile install nixpkgs#cachix
                  cachix use crane
                  cachix use nix-community

            - name: Configure Magic Nix Cache
              uses: DeterminateSystems/magic-nix-cache-action@main

            - name: Apply Nix binary cache configuration
              run: |
                  sudo tee -a /etc/nix/nix.conf > /dev/null <<EOF
                  extra-substituters = https://attic.kennel.juneis.dog/conduit https://attic.kennel.juneis.dog/conduwuit
                  extra-trusted-public-keys = conduit:Isq8FGyEC6FOXH6nD+BOeAA+bKp6X6UIbupSlGEPuOg= conduwuit:lYPVh7o1hLu1idH4Xt2QHaRa49WRGSAqzcfFd94aOTw=
                  EOF

            - name: Use alternative Nix binary caches if specified
              if: ${{ (env.ATTIC_ENDPOINT != '') && (env.ATTIC_PUBLIC_KEY != '') }}
              run: |
                  sudo tee -a /etc/nix/nix.conf > /dev/null <<EOF
                  extra-substituters = ${{ env.ATTIC_ENDPOINT }}
                  extra-trusted-public-keys = ${{ env.ATTIC_PUBLIC_KEY }}
                  EOF

            - name: Prepare build environment
              run: |
                  echo 'source $HOME/.nix-profile/share/nix-direnv/direnvrc' > "$HOME/.direnvrc"
                  nix profile install --impure --inputs-from . nixpkgs#direnv nixpkgs#nix-direnv
                  direnv allow
                  nix develop --command true

            - name: Build static ${{ matrix.target }}
              run: |
                  bin/nix-build-and-cache just .#static-${{ matrix.target }}
                  mkdir -p target/release
                  cp -v -f result/bin/conduit target/release/
                  direnv exec . cargo deb --no-build --no-strip --output target/debian/${{ matrix.target }}.deb
                  mv target/release/conduit static-${{ matrix.target }}

            - name: Upload static-${{ matrix.target }}
              uses: actions/upload-artifact@v4
              with:
                  name: static-${{ matrix.target }}
                  path: static-${{ matrix.target }}
                  if-no-files-found: error

            - name: Upload deb ${{ matrix.target }}
              uses: actions/upload-artifact@v4
              with:
                  name: deb-${{ matrix.target }}
                  path: target/debian/${{ matrix.target }}.deb
                  if-no-files-found: error

            - name: Build OCI image ${{ matrix.target }}
              run: |
                  bin/nix-build-and-cache just .#oci-image-${{ matrix.target }}
                  cp -v -f result oci-image-${{ matrix.target }}.tar.gz

            - name: Upload OCI image ${{ matrix.target }}
              uses: actions/upload-artifact@v4
              with:
                  name: oci-image-${{ matrix.target }}
                  path: oci-image-${{ matrix.target }}.tar.gz
                  if-no-files-found: error
                  compression-level: 0

            - name: Remove local artifacts
              run: |
                  rm -rf static-${{ matrix.target }} || echo
                  rm -f target/debian/${{ matrix.target }}.deb || echo
                  rm -rf deb-${{ matrix.target }} || echo
                  rm -rf oci-image-${{ matrix.target }} || echo
                  rm -f oci-image-${{ matrix.target }}.tar.gz || echo

    docker:
        name: Docker publish
        runs-on: self-hosted
        needs: build
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name != 'pull_request'
        env:
            GHCR_AMD64: ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.sha }}-amd64
            GHCR_TAG: ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.sha }}
            GHCR_BRANCH: ghcr.io/${{ github.repository }}:${{ (github.ref == 'refs/heads/main' && 'latest') || github.ref_name }}
        steps:
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Download artifacts
              uses: actions/download-artifact@v4

            - name: Move OCI images into position
              run: |
                  mv oci-image-x86_64-*-jemalloc/*.tar.gz oci-image-amd64.tar.gz

            - name: Load and push amd64 image
              run: |
                  docker load -i oci-image-amd64.tar.gz
                  docker tag $(docker images -q conduit:main) ${{ env.GHCR_AMD64 }}
                  docker push ${{ env.GHCR_AMD64 }}

            - name: Add Image Links to Job Summary
              run: |
                  echo "- \`docker pull ${{ env.GHCR_TAG }}\`" >> $GITHUB_STEP_SUMMARY
